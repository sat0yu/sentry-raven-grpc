// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mirror/mirror.proto

package mirror

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request containing the original message.
type EchoRequest struct {
	RequestBody          string   `protobuf:"bytes,1,opt,name=request_body,json=requestBody,proto3" json:"request_body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoRequest) Reset()         { *m = EchoRequest{} }
func (m *EchoRequest) String() string { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()    {}
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_79817a268deb1c80, []int{0}
}

func (m *EchoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoRequest.Unmarshal(m, b)
}
func (m *EchoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoRequest.Marshal(b, m, deterministic)
}
func (m *EchoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoRequest.Merge(m, src)
}
func (m *EchoRequest) XXX_Size() int {
	return xxx_messageInfo_EchoRequest.Size(m)
}
func (m *EchoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EchoRequest proto.InternalMessageInfo

func (m *EchoRequest) GetRequestBody() string {
	if m != nil {
		return m.RequestBody
	}
	return ""
}

// The response containing the mirrored message.
type EchoResponse struct {
	ResponseBody         string   `protobuf:"bytes,1,opt,name=response_body,json=responseBody,proto3" json:"response_body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoResponse) Reset()         { *m = EchoResponse{} }
func (m *EchoResponse) String() string { return proto.CompactTextString(m) }
func (*EchoResponse) ProtoMessage()    {}
func (*EchoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_79817a268deb1c80, []int{1}
}

func (m *EchoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoResponse.Unmarshal(m, b)
}
func (m *EchoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoResponse.Marshal(b, m, deterministic)
}
func (m *EchoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoResponse.Merge(m, src)
}
func (m *EchoResponse) XXX_Size() int {
	return xxx_messageInfo_EchoResponse.Size(m)
}
func (m *EchoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EchoResponse proto.InternalMessageInfo

func (m *EchoResponse) GetResponseBody() string {
	if m != nil {
		return m.ResponseBody
	}
	return ""
}

func init() {
	proto.RegisterType((*EchoRequest)(nil), "mirror.EchoRequest")
	proto.RegisterType((*EchoResponse)(nil), "mirror.EchoResponse")
}

func init() { proto.RegisterFile("mirror/mirror.proto", fileDescriptor_79817a268deb1c80) }

var fileDescriptor_79817a268deb1c80 = []byte{
	// 145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xce, 0xcd, 0x2c, 0x2a,
	0xca, 0x2f, 0xd2, 0x87, 0x50, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x6c, 0x10, 0x9e, 0x92,
	0x01, 0x17, 0xb7, 0x6b, 0x72, 0x46, 0x7e, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x90, 0x22,
	0x17, 0x4f, 0x11, 0x84, 0x19, 0x9f, 0x94, 0x9f, 0x52, 0x29, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19,
	0xc4, 0x0d, 0x15, 0x73, 0xca, 0x4f, 0xa9, 0x54, 0x32, 0xe6, 0xe2, 0x81, 0xe8, 0x28, 0x2e, 0xc8,
	0xcf, 0x2b, 0x4e, 0x15, 0x52, 0xe6, 0xe2, 0x2d, 0x82, 0xb2, 0x91, 0xf5, 0xf0, 0xc0, 0x04, 0x41,
	0x9a, 0x8c, 0x6c, 0xb9, 0xd8, 0x7c, 0xc1, 0x16, 0x0a, 0x19, 0x73, 0xb1, 0x80, 0xb4, 0x0b, 0x09,
	0xeb, 0x41, 0xdd, 0x83, 0x64, 0xbd, 0x94, 0x08, 0xaa, 0x20, 0xc4, 0x00, 0x25, 0x86, 0x24, 0x36,
	0xb0, 0xa3, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x2f, 0x0b, 0xcc, 0xcb, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MirrorClient is the client API for Mirror service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MirrorClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
}

type mirrorClient struct {
	cc *grpc.ClientConn
}

func NewMirrorClient(cc *grpc.ClientConn) MirrorClient {
	return &mirrorClient{cc}
}

func (c *mirrorClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/mirror.Mirror/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MirrorServer is the server API for Mirror service.
type MirrorServer interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
}

func RegisterMirrorServer(s *grpc.Server, srv MirrorServer) {
	s.RegisterService(&_Mirror_serviceDesc, srv)
}

func _Mirror_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirror.Mirror/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mirror_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mirror.Mirror",
	HandlerType: (*MirrorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Mirror_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mirror/mirror.proto",
}
